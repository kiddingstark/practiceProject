<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee     http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">  <display-name>springmvc_mybatis_test</display-name>
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
    	classpath:spring/applicationContext-*.xml
    	classpath:spring/spring-security.xml
    </param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  <servlet>
    <servlet-name>springmvc_rest</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring/springmvc.xml</param-value>
    </init-param>
  </servlet>
  <servlet-mapping>
    <servlet-name>springmvc_rest</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!--
    1、普通登录验证：login的controller方法 + loginFilter判断session
    2、SSM中SpringSecurity登录验证：使用提供好的Filter
    3、SpringCloud中gateWay登录验证：保存token，每次请求是在gateWay中验证,
      相较于session校验，session是保存在服务器端，分布式下不适用，token信息保存在一台redis数据库服务器即可（认证集中管理）
    4、使用JWT（标准而非框架），返回的token中有加密后的用户信息，JWT负责解析验证，用户信息完全在客户端（3.3方式用户信息仍然在服务器端）
      框架有springSecurity+oauth2整合实现认证与授权

  -->
  <filter>
      <filter-name>springSecurityFilterChain</filter-name><!--名字是固定的-->
      <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>
  
  <filter>
    <filter-name>CharacterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
   </init-param>
  </filter>
  
  <filter-mapping>
      <filter-name>springSecurityFilterChain</filter-name>
      <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <welcome-file-list>
    <welcome-file>main.html</welcome-file>
  </welcome-file-list>
  
  <!-- 配置springmvc不拦截的后缀文件 -->
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.jpg</url-pattern>
    <url-pattern>*.js</url-pattern>
    <url-pattern>*.css</url-pattern>
    <url-pattern>*.png</url-pattern>
    <url-pattern>*.html</url-pattern>
  </servlet-mapping>
</web-app>